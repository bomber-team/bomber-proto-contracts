// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: contracts/rest_contracts/result.proto

package rest_contracts

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BomberResult struct {
	BomberIp                string          `protobuf:"bytes,1,opt,name=bomberIp,proto3" json:"bomberIp,omitempty"`
	FormId                  string          `protobuf:"bytes,2,opt,name=formId,proto3" json:"formId,omitempty"`
	AmountTimeoutsRequests  int64           `protobuf:"varint,3,opt,name=amountTimeoutsRequests,proto3" json:"amountTimeoutsRequests,omitempty"`
	AmountStatusesPerStatus map[int32]int64 `protobuf:"bytes,4,rep,name=amountStatusesPerStatus,proto3" json:"amountStatusesPerStatus,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MsPerRequest            []int64         `protobuf:"varint,5,rep,packed,name=msPerRequest,proto3" json:"msPerRequest,omitempty"`
	ElapsedTimeAttack       float64         `protobuf:"fixed64,6,opt,name=elapsedTimeAttack,proto3" json:"elapsedTimeAttack,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}        `json:"-"`
	XXX_unrecognized        []byte          `json:"-"`
	XXX_sizecache           int32           `json:"-"`
}

func (m *BomberResult) Reset()         { *m = BomberResult{} }
func (m *BomberResult) String() string { return proto.CompactTextString(m) }
func (*BomberResult) ProtoMessage()    {}
func (*BomberResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_817e8ecd1481ad8d, []int{0}
}
func (m *BomberResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BomberResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BomberResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BomberResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BomberResult.Merge(m, src)
}
func (m *BomberResult) XXX_Size() int {
	return m.Size()
}
func (m *BomberResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BomberResult.DiscardUnknown(m)
}

var xxx_messageInfo_BomberResult proto.InternalMessageInfo

func (m *BomberResult) GetBomberIp() string {
	if m != nil {
		return m.BomberIp
	}
	return ""
}

func (m *BomberResult) GetFormId() string {
	if m != nil {
		return m.FormId
	}
	return ""
}

func (m *BomberResult) GetAmountTimeoutsRequests() int64 {
	if m != nil {
		return m.AmountTimeoutsRequests
	}
	return 0
}

func (m *BomberResult) GetAmountStatusesPerStatus() map[int32]int64 {
	if m != nil {
		return m.AmountStatusesPerStatus
	}
	return nil
}

func (m *BomberResult) GetMsPerRequest() []int64 {
	if m != nil {
		return m.MsPerRequest
	}
	return nil
}

func (m *BomberResult) GetElapsedTimeAttack() float64 {
	if m != nil {
		return m.ElapsedTimeAttack
	}
	return 0
}

func init() {
	proto.RegisterType((*BomberResult)(nil), "org.bomber.team.contracts.BomberResult")
	proto.RegisterMapType((map[int32]int64)(nil), "org.bomber.team.contracts.BomberResult.AmountStatusesPerStatusEntry")
}

func init() {
	proto.RegisterFile("contracts/rest_contracts/result.proto", fileDescriptor_817e8ecd1481ad8d)
}

var fileDescriptor_817e8ecd1481ad8d = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x4a, 0x2b, 0x31,
	0x14, 0x25, 0xcd, 0x6b, 0x79, 0x2f, 0xaf, 0x0b, 0x0d, 0x52, 0xc7, 0x22, 0x65, 0x28, 0x08, 0xb3,
	0x90, 0x14, 0x14, 0x44, 0xdc, 0xb5, 0xea, 0xa2, 0xae, 0x24, 0xba, 0x72, 0x53, 0x32, 0xd3, 0x38,
	0x96, 0x4e, 0x26, 0x35, 0xb9, 0x11, 0xba, 0xf1, 0x3b, 0xfc, 0x24, 0x97, 0x7e, 0x82, 0xf4, 0x4b,
	0x64, 0x32, 0xb5, 0xb4, 0xea, 0xb8, 0x3b, 0x27, 0xe7, 0x24, 0x39, 0xdc, 0x7b, 0xc8, 0x41, 0xa2,
	0x73, 0x30, 0x22, 0x01, 0xdb, 0x33, 0xd2, 0xc2, 0x68, 0x83, 0xba, 0x0c, 0xd8, 0xcc, 0x68, 0xd0,
	0x74, 0x4f, 0x9b, 0x94, 0xc5, 0x5a, 0xc5, 0xd2, 0x30, 0x90, 0x42, 0xb1, 0x95, 0xaf, 0xfb, 0x82,
	0x49, 0x73, 0xe0, 0x15, 0xee, 0x6f, 0xd0, 0x36, 0xf9, 0x5b, 0x3a, 0x87, 0xb3, 0x00, 0x85, 0x28,
	0xfa, 0xc7, 0x57, 0x9c, 0xb6, 0x48, 0xe3, 0x5e, 0x1b, 0x35, 0x1c, 0x07, 0x35, 0xaf, 0x2c, 0x19,
	0x3d, 0x21, 0x2d, 0xa1, 0xb4, 0xcb, 0xe1, 0x76, 0xa2, 0xa4, 0x76, 0x60, 0xb9, 0x7c, 0x74, 0xd2,
	0x82, 0x0d, 0x70, 0x88, 0x22, 0xcc, 0x2b, 0x54, 0xfa, 0x4c, 0x76, 0x4b, 0xe5, 0x06, 0x04, 0x38,
	0x2b, 0xed, 0xb5, 0x34, 0x25, 0x0c, 0xfe, 0x84, 0x38, 0xfa, 0x7f, 0x74, 0xc1, 0x2a, 0x93, 0xb3,
	0xf5, 0xd4, 0xac, 0xff, 0xf3, 0x33, 0x97, 0x39, 0x98, 0x39, 0xaf, 0xfa, 0x84, 0x76, 0x49, 0x53,
	0x15, 0x74, 0x19, 0x28, 0xa8, 0x87, 0x38, 0xc2, 0x7c, 0xe3, 0x8c, 0x1e, 0x92, 0x6d, 0x99, 0x89,
	0x99, 0x95, 0xe3, 0x22, 0x7e, 0x1f, 0x40, 0x24, 0xd3, 0xa0, 0x11, 0xa2, 0x08, 0xf1, 0xef, 0x42,
	0xfb, 0x8a, 0xec, 0xff, 0x16, 0x85, 0x6e, 0x11, 0x3c, 0x95, 0x73, 0x3f, 0xd8, 0x3a, 0x2f, 0x20,
	0xdd, 0x21, 0xf5, 0x27, 0x91, 0x39, 0xe9, 0x47, 0x8a, 0x79, 0x49, 0xce, 0x6a, 0xa7, 0x68, 0x90,
	0xbd, 0x2e, 0x3a, 0xe8, 0x6d, 0xd1, 0x41, 0xef, 0x8b, 0x0e, 0x22, 0xd5, 0x3b, 0xbc, 0x3b, 0x4f,
	0x27, 0xf0, 0xe0, 0x62, 0x96, 0x68, 0xd5, 0x2b, 0x1d, 0xa3, 0xc2, 0xf1, 0x89, 0x7d, 0x07, 0xd6,
	0xaa, 0x91, 0xea, 0x4c, 0xe4, 0xe9, 0x97, 0xc2, 0xc4, 0x0d, 0x6f, 0x3b, 0xfe, 0x08, 0x00, 0x00,
	0xff, 0xff, 0x07, 0xc6, 0x97, 0x54, 0x53, 0x02, 0x00, 0x00,
}

func (m *BomberResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BomberResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BomberResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ElapsedTimeAttack != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ElapsedTimeAttack))))
		i--
		dAtA[i] = 0x31
	}
	if len(m.MsPerRequest) > 0 {
		dAtA2 := make([]byte, len(m.MsPerRequest)*10)
		var j1 int
		for _, num1 := range m.MsPerRequest {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintResult(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AmountStatusesPerStatus) > 0 {
		for k := range m.AmountStatusesPerStatus {
			v := m.AmountStatusesPerStatus[k]
			baseI := i
			i = encodeVarintResult(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintResult(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintResult(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.AmountTimeoutsRequests != 0 {
		i = encodeVarintResult(dAtA, i, uint64(m.AmountTimeoutsRequests))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FormId) > 0 {
		i -= len(m.FormId)
		copy(dAtA[i:], m.FormId)
		i = encodeVarintResult(dAtA, i, uint64(len(m.FormId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BomberIp) > 0 {
		i -= len(m.BomberIp)
		copy(dAtA[i:], m.BomberIp)
		i = encodeVarintResult(dAtA, i, uint64(len(m.BomberIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BomberResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BomberIp)
	if l > 0 {
		n += 1 + l + sovResult(uint64(l))
	}
	l = len(m.FormId)
	if l > 0 {
		n += 1 + l + sovResult(uint64(l))
	}
	if m.AmountTimeoutsRequests != 0 {
		n += 1 + sovResult(uint64(m.AmountTimeoutsRequests))
	}
	if len(m.AmountStatusesPerStatus) > 0 {
		for k, v := range m.AmountStatusesPerStatus {
			_ = k
			_ = v
			mapEntrySize := 1 + sovResult(uint64(k)) + 1 + sovResult(uint64(v))
			n += mapEntrySize + 1 + sovResult(uint64(mapEntrySize))
		}
	}
	if len(m.MsPerRequest) > 0 {
		l = 0
		for _, e := range m.MsPerRequest {
			l += sovResult(uint64(e))
		}
		n += 1 + sovResult(uint64(l)) + l
	}
	if m.ElapsedTimeAttack != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResult(x uint64) (n int) {
	return sovResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BomberResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BomberResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BomberResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BomberIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BomberIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountTimeoutsRequests", wireType)
			}
			m.AmountTimeoutsRequests = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AmountTimeoutsRequests |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountStatusesPerStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AmountStatusesPerStatus == nil {
				m.AmountStatusesPerStatus = make(map[int32]int64)
			}
			var mapkey int32
			var mapvalue int64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowResult
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowResult
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowResult
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipResult(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthResult
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AmountStatusesPerStatus[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowResult
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MsPerRequest = append(m.MsPerRequest, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowResult
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthResult
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthResult
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MsPerRequest) == 0 {
					m.MsPerRequest = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowResult
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MsPerRequest = append(m.MsPerRequest, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MsPerRequest", wireType)
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElapsedTimeAttack", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ElapsedTimeAttack = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthResult
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResult = fmt.Errorf("proto: unexpected end of group")
)
