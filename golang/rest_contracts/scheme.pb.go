// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: contracts/rest_contracts/scheme.proto

package rest_contracts

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BodyParamType int32

const (
	BodyParamType_SIMPLE_PROPERTY BodyParamType = 0
	BodyParamType_LIST            BodyParamType = 1
	BodyParamType_OBJECT          BodyParamType = 2
)

var BodyParamType_name = map[int32]string{
	0: "SIMPLE_PROPERTY",
	1: "LIST",
	2: "OBJECT",
}

var BodyParamType_value = map[string]int32{
	"SIMPLE_PROPERTY": 0,
	"LIST":            1,
	"OBJECT":          2,
}

func (x BodyParamType) String() string {
	return proto.EnumName(BodyParamType_name, int32(x))
}

func (BodyParamType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{0}
}

type GeneratorType int32

const (
	GeneratorType_WORD_GENERATOR   GeneratorType = 0
	GeneratorType_DIGIT_GENERATOR  GeneratorType = 1
	GeneratorType_REGEXP_GENERATOR GeneratorType = 2
)

var GeneratorType_name = map[int32]string{
	0: "WORD_GENERATOR",
	1: "DIGIT_GENERATOR",
	2: "REGEXP_GENERATOR",
}

var GeneratorType_value = map[string]int32{
	"WORD_GENERATOR":   0,
	"DIGIT_GENERATOR":  1,
	"REGEXP_GENERATOR": 2,
}

func (x GeneratorType) String() string {
	return proto.EnumName(GeneratorType_name, int32(x))
}

func (GeneratorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{1}
}

type Language int32

const (
	Language_RU Language = 0
	Language_EN Language = 1
)

var Language_name = map[int32]string{
	0: "RU",
	1: "EN",
}

var Language_value = map[string]int32{
	"RU": 0,
	"EN": 1,
}

func (x Language) String() string {
	return proto.EnumName(Language_name, int32(x))
}

func (Language) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{2}
}

type RestSchema struct {
	Id                   string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PathVariables        map[string]string `protobuf:"bytes,2,rep,name=pathVariables,proto3" json:"pathVariables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Headers              map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Request              []*RequestParam   `protobuf:"bytes,4,rep,name=request,proto3" json:"request,omitempty"`
	Body                 []*BodyParam      `protobuf:"bytes,5,rep,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RestSchema) Reset()         { *m = RestSchema{} }
func (m *RestSchema) String() string { return proto.CompactTextString(m) }
func (*RestSchema) ProtoMessage()    {}
func (*RestSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{0}
}
func (m *RestSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RestSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RestSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RestSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestSchema.Merge(m, src)
}
func (m *RestSchema) XXX_Size() int {
	return m.Size()
}
func (m *RestSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_RestSchema.DiscardUnknown(m)
}

var xxx_messageInfo_RestSchema proto.InternalMessageInfo

func (m *RestSchema) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RestSchema) GetPathVariables() map[string]string {
	if m != nil {
		return m.PathVariables
	}
	return nil
}

func (m *RestSchema) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *RestSchema) GetRequest() []*RequestParam {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *RestSchema) GetBody() []*BodyParam {
	if m != nil {
		return m.Body
	}
	return nil
}

type BodyParam struct {
	Name          string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          BodyParamType    `protobuf:"varint,2,opt,name=type,proto3,enum=org.bomber.team.contracts.BodyParamType" json:"type,omitempty"`
	IsGenerated   bool             `protobuf:"varint,3,opt,name=isGenerated,proto3" json:"isGenerated,omitempty"`
	GeneratorType GeneratorType    `protobuf:"varint,4,opt,name=generatorType,proto3,enum=org.bomber.team.contracts.GeneratorType" json:"generatorType,omitempty"`
	Config        *GeneratorConfig `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*BodyParam_SimpleProperty
	//	*BodyParam_ListProperty
	//	*BodyParam_Properties
	Value                isBodyParam_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *BodyParam) Reset()         { *m = BodyParam{} }
func (m *BodyParam) String() string { return proto.CompactTextString(m) }
func (*BodyParam) ProtoMessage()    {}
func (*BodyParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{1}
}
func (m *BodyParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BodyParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BodyParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BodyParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BodyParam.Merge(m, src)
}
func (m *BodyParam) XXX_Size() int {
	return m.Size()
}
func (m *BodyParam) XXX_DiscardUnknown() {
	xxx_messageInfo_BodyParam.DiscardUnknown(m)
}

var xxx_messageInfo_BodyParam proto.InternalMessageInfo

type isBodyParam_Value interface {
	isBodyParam_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type BodyParam_SimpleProperty struct {
	SimpleProperty *SimpleValue `protobuf:"bytes,6,opt,name=simpleProperty,proto3,oneof" json:"simpleProperty,omitempty"`
}
type BodyParam_ListProperty struct {
	ListProperty *ListProperty `protobuf:"bytes,7,opt,name=listProperty,proto3,oneof" json:"listProperty,omitempty"`
}
type BodyParam_Properties struct {
	Properties *ObjectProperty `protobuf:"bytes,8,opt,name=properties,proto3,oneof" json:"properties,omitempty"`
}

func (*BodyParam_SimpleProperty) isBodyParam_Value() {}
func (*BodyParam_ListProperty) isBodyParam_Value()   {}
func (*BodyParam_Properties) isBodyParam_Value()     {}

func (m *BodyParam) GetValue() isBodyParam_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *BodyParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BodyParam) GetType() BodyParamType {
	if m != nil {
		return m.Type
	}
	return BodyParamType_SIMPLE_PROPERTY
}

func (m *BodyParam) GetIsGenerated() bool {
	if m != nil {
		return m.IsGenerated
	}
	return false
}

func (m *BodyParam) GetGeneratorType() GeneratorType {
	if m != nil {
		return m.GeneratorType
	}
	return GeneratorType_WORD_GENERATOR
}

func (m *BodyParam) GetConfig() *GeneratorConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *BodyParam) GetSimpleProperty() *SimpleValue {
	if x, ok := m.GetValue().(*BodyParam_SimpleProperty); ok {
		return x.SimpleProperty
	}
	return nil
}

func (m *BodyParam) GetListProperty() *ListProperty {
	if x, ok := m.GetValue().(*BodyParam_ListProperty); ok {
		return x.ListProperty
	}
	return nil
}

func (m *BodyParam) GetProperties() *ObjectProperty {
	if x, ok := m.GetValue().(*BodyParam_Properties); ok {
		return x.Properties
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*BodyParam) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*BodyParam_SimpleProperty)(nil),
		(*BodyParam_ListProperty)(nil),
		(*BodyParam_Properties)(nil),
	}
}

type SimpleValue struct {
	// Types that are valid to be assigned to Value:
	//	*SimpleValue_StringValue
	//	*SimpleValue_Int32Value
	//	*SimpleValue_Int64Value
	Value                isSimpleValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SimpleValue) Reset()         { *m = SimpleValue{} }
func (m *SimpleValue) String() string { return proto.CompactTextString(m) }
func (*SimpleValue) ProtoMessage()    {}
func (*SimpleValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{2}
}
func (m *SimpleValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleValue.Merge(m, src)
}
func (m *SimpleValue) XXX_Size() int {
	return m.Size()
}
func (m *SimpleValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleValue.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleValue proto.InternalMessageInfo

type isSimpleValue_Value interface {
	isSimpleValue_Value()
	MarshalTo([]byte) (int, error)
	Size() int
}

type SimpleValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=stringValue,proto3,oneof" json:"stringValue,omitempty"`
}
type SimpleValue_Int32Value struct {
	Int32Value int32 `protobuf:"varint,2,opt,name=int32Value,proto3,oneof" json:"int32Value,omitempty"`
}
type SimpleValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64Value,proto3,oneof" json:"int64Value,omitempty"`
}

func (*SimpleValue_StringValue) isSimpleValue_Value() {}
func (*SimpleValue_Int32Value) isSimpleValue_Value()  {}
func (*SimpleValue_Int64Value) isSimpleValue_Value()  {}

func (m *SimpleValue) GetValue() isSimpleValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SimpleValue) GetStringValue() string {
	if x, ok := m.GetValue().(*SimpleValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *SimpleValue) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*SimpleValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *SimpleValue) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*SimpleValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SimpleValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SimpleValue_StringValue)(nil),
		(*SimpleValue_Int32Value)(nil),
		(*SimpleValue_Int64Value)(nil),
	}
}

type ListProperty struct {
	Value                []*SimpleValue `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListProperty) Reset()         { *m = ListProperty{} }
func (m *ListProperty) String() string { return proto.CompactTextString(m) }
func (*ListProperty) ProtoMessage()    {}
func (*ListProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{3}
}
func (m *ListProperty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListProperty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListProperty.Merge(m, src)
}
func (m *ListProperty) XXX_Size() int {
	return m.Size()
}
func (m *ListProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_ListProperty.DiscardUnknown(m)
}

var xxx_messageInfo_ListProperty proto.InternalMessageInfo

func (m *ListProperty) GetValue() []*SimpleValue {
	if m != nil {
		return m.Value
	}
	return nil
}

type ObjectProperty struct {
	Properties           map[string]*BodyParam `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ObjectProperty) Reset()         { *m = ObjectProperty{} }
func (m *ObjectProperty) String() string { return proto.CompactTextString(m) }
func (*ObjectProperty) ProtoMessage()    {}
func (*ObjectProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{4}
}
func (m *ObjectProperty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectProperty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectProperty.Merge(m, src)
}
func (m *ObjectProperty) XXX_Size() int {
	return m.Size()
}
func (m *ObjectProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectProperty.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectProperty proto.InternalMessageInfo

func (m *ObjectProperty) GetProperties() map[string]*BodyParam {
	if m != nil {
		return m.Properties
	}
	return nil
}

type RequestParam struct {
	Name                 string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsGeneratorNeed      bool             `protobuf:"varint,2,opt,name=isGeneratorNeed,proto3" json:"isGeneratorNeed,omitempty"`
	Value                string           `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Generator            GeneratorType    `protobuf:"varint,5,opt,name=generator,proto3,enum=org.bomber.team.contracts.GeneratorType" json:"generator,omitempty"`
	GeneratorConfig      *GeneratorConfig `protobuf:"bytes,6,opt,name=generatorConfig,proto3" json:"generatorConfig,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RequestParam) Reset()         { *m = RequestParam{} }
func (m *RequestParam) String() string { return proto.CompactTextString(m) }
func (*RequestParam) ProtoMessage()    {}
func (*RequestParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{5}
}
func (m *RequestParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestParam.Merge(m, src)
}
func (m *RequestParam) XXX_Size() int {
	return m.Size()
}
func (m *RequestParam) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestParam.DiscardUnknown(m)
}

var xxx_messageInfo_RequestParam proto.InternalMessageInfo

func (m *RequestParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RequestParam) GetIsGeneratorNeed() bool {
	if m != nil {
		return m.IsGeneratorNeed
	}
	return false
}

func (m *RequestParam) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *RequestParam) GetGenerator() GeneratorType {
	if m != nil {
		return m.Generator
	}
	return GeneratorType_WORD_GENERATOR
}

func (m *RequestParam) GetGeneratorConfig() *GeneratorConfig {
	if m != nil {
		return m.GeneratorConfig
	}
	return nil
}

type GeneratorConfig struct {
	// Types that are valid to be assigned to Res:
	//	*GeneratorConfig_WordGeneratorConfig
	//	*GeneratorConfig_RegexpConfig
	//	*GeneratorConfig_DigitGeneratorConfig
	Res                  isGeneratorConfig_Res `protobuf_oneof:"res"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *GeneratorConfig) Reset()         { *m = GeneratorConfig{} }
func (m *GeneratorConfig) String() string { return proto.CompactTextString(m) }
func (*GeneratorConfig) ProtoMessage()    {}
func (*GeneratorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{6}
}
func (m *GeneratorConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GeneratorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GeneratorConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GeneratorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneratorConfig.Merge(m, src)
}
func (m *GeneratorConfig) XXX_Size() int {
	return m.Size()
}
func (m *GeneratorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneratorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_GeneratorConfig proto.InternalMessageInfo

type isGeneratorConfig_Res interface {
	isGeneratorConfig_Res()
	MarshalTo([]byte) (int, error)
	Size() int
}

type GeneratorConfig_WordGeneratorConfig struct {
	WordGeneratorConfig *WordGeneratorConfig `protobuf:"bytes,1,opt,name=wordGeneratorConfig,proto3,oneof" json:"wordGeneratorConfig,omitempty"`
}
type GeneratorConfig_RegexpConfig struct {
	RegexpConfig *RegexpConfig `protobuf:"bytes,2,opt,name=regexpConfig,proto3,oneof" json:"regexpConfig,omitempty"`
}
type GeneratorConfig_DigitGeneratorConfig struct {
	DigitGeneratorConfig *DigitGeneratorConfig `protobuf:"bytes,3,opt,name=digitGeneratorConfig,proto3,oneof" json:"digitGeneratorConfig,omitempty"`
}

func (*GeneratorConfig_WordGeneratorConfig) isGeneratorConfig_Res()  {}
func (*GeneratorConfig_RegexpConfig) isGeneratorConfig_Res()         {}
func (*GeneratorConfig_DigitGeneratorConfig) isGeneratorConfig_Res() {}

func (m *GeneratorConfig) GetRes() isGeneratorConfig_Res {
	if m != nil {
		return m.Res
	}
	return nil
}

func (m *GeneratorConfig) GetWordGeneratorConfig() *WordGeneratorConfig {
	if x, ok := m.GetRes().(*GeneratorConfig_WordGeneratorConfig); ok {
		return x.WordGeneratorConfig
	}
	return nil
}

func (m *GeneratorConfig) GetRegexpConfig() *RegexpConfig {
	if x, ok := m.GetRes().(*GeneratorConfig_RegexpConfig); ok {
		return x.RegexpConfig
	}
	return nil
}

func (m *GeneratorConfig) GetDigitGeneratorConfig() *DigitGeneratorConfig {
	if x, ok := m.GetRes().(*GeneratorConfig_DigitGeneratorConfig); ok {
		return x.DigitGeneratorConfig
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GeneratorConfig) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GeneratorConfig_WordGeneratorConfig)(nil),
		(*GeneratorConfig_RegexpConfig)(nil),
		(*GeneratorConfig_DigitGeneratorConfig)(nil),
	}
}

type Section struct {
	Min                  int32    `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int32    `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Section) Reset()         { *m = Section{} }
func (m *Section) String() string { return proto.CompactTextString(m) }
func (*Section) ProtoMessage()    {}
func (*Section) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{7}
}
func (m *Section) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Section) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Section.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Section) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Section.Merge(m, src)
}
func (m *Section) XXX_Size() int {
	return m.Size()
}
func (m *Section) XXX_DiscardUnknown() {
	xxx_messageInfo_Section.DiscardUnknown(m)
}

var xxx_messageInfo_Section proto.InternalMessageInfo

func (m *Section) GetMin() int32 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *Section) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

type WordGeneratorConfig struct {
	MinLetters           int32    `protobuf:"varint,1,opt,name=minLetters,proto3" json:"minLetters,omitempty"`
	MaxLetters           int32    `protobuf:"varint,2,opt,name=maxLetters,proto3" json:"maxLetters,omitempty"`
	Language             Language `protobuf:"varint,3,opt,name=language,proto3,enum=org.bomber.team.contracts.Language" json:"language,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WordGeneratorConfig) Reset()         { *m = WordGeneratorConfig{} }
func (m *WordGeneratorConfig) String() string { return proto.CompactTextString(m) }
func (*WordGeneratorConfig) ProtoMessage()    {}
func (*WordGeneratorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{8}
}
func (m *WordGeneratorConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WordGeneratorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WordGeneratorConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WordGeneratorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WordGeneratorConfig.Merge(m, src)
}
func (m *WordGeneratorConfig) XXX_Size() int {
	return m.Size()
}
func (m *WordGeneratorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_WordGeneratorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_WordGeneratorConfig proto.InternalMessageInfo

func (m *WordGeneratorConfig) GetMinLetters() int32 {
	if m != nil {
		return m.MinLetters
	}
	return 0
}

func (m *WordGeneratorConfig) GetMaxLetters() int32 {
	if m != nil {
		return m.MaxLetters
	}
	return 0
}

func (m *WordGeneratorConfig) GetLanguage() Language {
	if m != nil {
		return m.Language
	}
	return Language_RU
}

type RegexpConfig struct {
	Pattern              string   `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegexpConfig) Reset()         { *m = RegexpConfig{} }
func (m *RegexpConfig) String() string { return proto.CompactTextString(m) }
func (*RegexpConfig) ProtoMessage()    {}
func (*RegexpConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{9}
}
func (m *RegexpConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegexpConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegexpConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegexpConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegexpConfig.Merge(m, src)
}
func (m *RegexpConfig) XXX_Size() int {
	return m.Size()
}
func (m *RegexpConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RegexpConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RegexpConfig proto.InternalMessageInfo

func (m *RegexpConfig) GetPattern() string {
	if m != nil {
		return m.Pattern
	}
	return ""
}

type DigitGeneratorConfig struct {
	StartFrom            int32    `protobuf:"varint,3,opt,name=startFrom,proto3" json:"startFrom,omitempty"`
	EndTo                int32    `protobuf:"varint,4,opt,name=endTo,proto3" json:"endTo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DigitGeneratorConfig) Reset()         { *m = DigitGeneratorConfig{} }
func (m *DigitGeneratorConfig) String() string { return proto.CompactTextString(m) }
func (*DigitGeneratorConfig) ProtoMessage()    {}
func (*DigitGeneratorConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_40937820a8c7d8f8, []int{10}
}
func (m *DigitGeneratorConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DigitGeneratorConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DigitGeneratorConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DigitGeneratorConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DigitGeneratorConfig.Merge(m, src)
}
func (m *DigitGeneratorConfig) XXX_Size() int {
	return m.Size()
}
func (m *DigitGeneratorConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DigitGeneratorConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DigitGeneratorConfig proto.InternalMessageInfo

func (m *DigitGeneratorConfig) GetStartFrom() int32 {
	if m != nil {
		return m.StartFrom
	}
	return 0
}

func (m *DigitGeneratorConfig) GetEndTo() int32 {
	if m != nil {
		return m.EndTo
	}
	return 0
}

func init() {
	proto.RegisterEnum("org.bomber.team.contracts.BodyParamType", BodyParamType_name, BodyParamType_value)
	proto.RegisterEnum("org.bomber.team.contracts.GeneratorType", GeneratorType_name, GeneratorType_value)
	proto.RegisterEnum("org.bomber.team.contracts.Language", Language_name, Language_value)
	proto.RegisterType((*RestSchema)(nil), "org.bomber.team.contracts.RestSchema")
	proto.RegisterMapType((map[string]string)(nil), "org.bomber.team.contracts.RestSchema.HeadersEntry")
	proto.RegisterMapType((map[string]string)(nil), "org.bomber.team.contracts.RestSchema.PathVariablesEntry")
	proto.RegisterType((*BodyParam)(nil), "org.bomber.team.contracts.BodyParam")
	proto.RegisterType((*SimpleValue)(nil), "org.bomber.team.contracts.SimpleValue")
	proto.RegisterType((*ListProperty)(nil), "org.bomber.team.contracts.ListProperty")
	proto.RegisterType((*ObjectProperty)(nil), "org.bomber.team.contracts.ObjectProperty")
	proto.RegisterMapType((map[string]*BodyParam)(nil), "org.bomber.team.contracts.ObjectProperty.PropertiesEntry")
	proto.RegisterType((*RequestParam)(nil), "org.bomber.team.contracts.RequestParam")
	proto.RegisterType((*GeneratorConfig)(nil), "org.bomber.team.contracts.GeneratorConfig")
	proto.RegisterType((*Section)(nil), "org.bomber.team.contracts.Section")
	proto.RegisterType((*WordGeneratorConfig)(nil), "org.bomber.team.contracts.WordGeneratorConfig")
	proto.RegisterType((*RegexpConfig)(nil), "org.bomber.team.contracts.RegexpConfig")
	proto.RegisterType((*DigitGeneratorConfig)(nil), "org.bomber.team.contracts.DigitGeneratorConfig")
}

func init() {
	proto.RegisterFile("contracts/rest_contracts/scheme.proto", fileDescriptor_40937820a8c7d8f8)
}

var fileDescriptor_40937820a8c7d8f8 = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0xc7, 0xb1, 0xf9, 0xcc, 0x21, 0x01, 0x34, 0xc9, 0x85, 0x1b, 0x55, 0x11, 0x72, 0xbf, 0x68,
	0xa4, 0x3a, 0x12, 0x5b, 0x55, 0x69, 0xb4, 0x52, 0xbb, 0x24, 0x2c, 0x64, 0xcb, 0x02, 0x1a, 0x68,
	0xb6, 0xdb, 0x8b, 0x46, 0x03, 0x9e, 0x3a, 0x6e, 0xb1, 0x4d, 0xc7, 0x93, 0x36, 0xdc, 0x54, 0xbd,
	0xee, 0x03, 0xf4, 0x41, 0xfa, 0x0e, 0x95, 0x7a, 0xb9, 0x8f, 0x50, 0xe5, 0x49, 0xaa, 0x19, 0x1b,
	0x33, 0xb0, 0x2c, 0x21, 0x57, 0xcc, 0x1c, 0x9f, 0xff, 0x6f, 0x3c, 0x87, 0xf3, 0x1f, 0x0f, 0x7c,
	0x34, 0x0e, 0x7c, 0xce, 0xc8, 0x98, 0x87, 0x27, 0x8c, 0x86, 0xfc, 0x7a, 0x31, 0x0d, 0xc7, 0x37,
	0xd4, 0xa3, 0xd6, 0x94, 0x05, 0x3c, 0x40, 0xef, 0x05, 0xcc, 0xb1, 0x46, 0x81, 0x37, 0xa2, 0xcc,
	0xe2, 0x94, 0x78, 0x56, 0x92, 0x67, 0xfe, 0x93, 0x06, 0xc0, 0x34, 0xe4, 0x03, 0x91, 0x4f, 0x50,
	0x09, 0x74, 0xd7, 0x36, 0xb4, 0xaa, 0x56, 0xdb, 0xc1, 0xba, 0x6b, 0xa3, 0x1f, 0x60, 0x6f, 0x4a,
	0xf8, 0xcd, 0x15, 0x61, 0x2e, 0x19, 0x4d, 0x68, 0x68, 0xe8, 0xd5, 0x74, 0xad, 0x58, 0x3f, 0xb5,
	0xde, 0x49, 0xb4, 0x16, 0x34, 0xab, 0xaf, 0x4a, 0x9b, 0x3e, 0x67, 0x33, 0xbc, 0x8c, 0x43, 0x1d,
	0xc8, 0xdf, 0x50, 0x62, 0x53, 0x16, 0x1a, 0x69, 0x49, 0xae, 0x6f, 0x47, 0x6e, 0x47, 0xa2, 0x88,
	0x39, 0x47, 0xa0, 0x67, 0x90, 0x67, 0xf4, 0x97, 0x5b, 0x1a, 0x72, 0x23, 0x23, 0x69, 0x9f, 0x6c,
	0xa4, 0xc9, 0xcc, 0x3e, 0x61, 0xc4, 0xc3, 0x73, 0x1d, 0x3a, 0x85, 0xcc, 0x28, 0xb0, 0x67, 0x46,
	0x56, 0xea, 0x3f, 0xdc, 0xa0, 0x6f, 0x04, 0xf6, 0x2c, 0x12, 0x4b, 0xc5, 0xe1, 0xd7, 0x80, 0xde,
	0xde, 0x2f, 0xaa, 0x40, 0xfa, 0x67, 0x3a, 0x8b, 0x2b, 0x2a, 0x86, 0xe8, 0x00, 0xb2, 0xbf, 0x92,
	0xc9, 0x2d, 0x35, 0x74, 0x19, 0x8b, 0x26, 0x67, 0xfa, 0xa9, 0x76, 0x78, 0x06, 0xbb, 0xea, 0xbe,
	0x1e, 0xa3, 0x35, 0xff, 0xcc, 0xc0, 0x4e, 0xf2, 0x46, 0x08, 0x41, 0xc6, 0x27, 0x1e, 0x8d, 0xa5,
	0x72, 0x8c, 0x9e, 0x42, 0x86, 0xcf, 0xa6, 0x91, 0xb4, 0x54, 0xaf, 0x6d, 0xb3, 0xb3, 0xe1, 0x6c,
	0x4a, 0xb1, 0x54, 0xa1, 0x2a, 0x14, 0xdd, 0xb0, 0x45, 0x7d, 0xca, 0x08, 0xa7, 0xb6, 0x91, 0xae,
	0x6a, 0xb5, 0x02, 0x56, 0x43, 0xa8, 0x0b, 0x7b, 0x4e, 0x34, 0x09, 0x98, 0x10, 0x1a, 0x99, 0x07,
	0x17, 0x6a, 0xa9, 0xf9, 0x78, 0x59, 0x8e, 0x1a, 0x90, 0x1b, 0x07, 0xfe, 0x8f, 0xae, 0x63, 0x64,
	0xab, 0x5a, 0xad, 0x58, 0x3f, 0xde, 0x06, 0x74, 0x2e, 0x15, 0x38, 0x56, 0xa2, 0x3e, 0x94, 0x42,
	0xd7, 0x9b, 0x4e, 0x68, 0x9f, 0x05, 0x53, 0xca, 0xf8, 0xcc, 0xc8, 0x49, 0xd6, 0xc7, 0x1b, 0x58,
	0x03, 0x29, 0xb8, 0x12, 0x95, 0x6d, 0xa7, 0xf0, 0x8a, 0x1e, 0xbd, 0x84, 0xdd, 0x89, 0x1b, 0xf2,
	0x84, 0x97, 0x97, 0xbc, 0x4d, 0x7d, 0xd6, 0x51, 0xd2, 0xdb, 0x29, 0xbc, 0x24, 0x47, 0xdf, 0x00,
	0x4c, 0xa3, 0xb1, 0x4b, 0x43, 0xa3, 0x20, 0x61, 0x9f, 0x6e, 0x80, 0xf5, 0x46, 0x3f, 0xd1, 0xb1,
	0x8a, 0x53, 0xe4, 0x8d, 0x7c, 0xdc, 0x1d, 0xe6, 0xef, 0x50, 0x54, 0x76, 0x81, 0x4c, 0x28, 0x86,
	0x9c, 0xb9, 0xbe, 0x23, 0xa7, 0x51, 0x53, 0xb4, 0x53, 0x58, 0x0d, 0xa2, 0x2a, 0x80, 0xeb, 0xf3,
	0x27, 0xf5, 0xab, 0xa4, 0xbd, 0xb2, 0x82, 0xbe, 0x88, 0xc5, 0x19, 0x5f, 0x7c, 0x1e, 0x65, 0x88,
	0x06, 0x48, 0xc7, 0x19, 0x71, 0x6c, 0xb1, 0x7e, 0x07, 0x76, 0xd5, 0x5d, 0xa3, 0xa7, 0xf3, 0xb6,
	0xd5, 0xa4, 0xab, 0xb6, 0xac, 0x7e, 0xdc, 0xde, 0xe6, 0x1b, 0x0d, 0x4a, 0xcb, 0xfb, 0x46, 0xaf,
	0x97, 0xca, 0x16, 0x51, 0xbf, 0xdc, 0xba, 0x6c, 0x56, 0x3f, 0xd1, 0x46, 0x07, 0x88, 0x02, 0x3b,
	0x1c, 0x43, 0x79, 0xe5, 0xf1, 0x1a, 0x1f, 0x9e, 0xa9, 0x3e, 0xdc, 0xf6, 0x98, 0x50, 0xdc, 0xfa,
	0x87, 0x0e, 0xbb, 0xea, 0xf9, 0xb3, 0xd6, 0xb0, 0x35, 0x28, 0x27, 0xfe, 0x0a, 0x58, 0x97, 0x52,
	0x5b, 0x2e, 0x57, 0xc0, 0xab, 0xe1, 0xc5, 0xb1, 0x90, 0x56, 0x8e, 0x05, 0xf4, 0x1c, 0x76, 0x12,
	0x47, 0x49, 0x0f, 0x3d, 0xc6, 0x8c, 0x0b, 0x29, 0x1a, 0x42, 0xd9, 0x59, 0xf6, 0x57, 0xec, 0xa2,
	0xc7, 0x38, 0x72, 0x15, 0x61, 0xfe, 0xad, 0x43, 0x79, 0x25, 0x09, 0x8d, 0x60, 0xff, 0xb7, 0x80,
	0xd9, 0x2b, 0x61, 0x59, 0x94, 0x62, 0xdd, 0xda, 0xb0, 0xda, 0xab, 0xb7, 0x55, 0xed, 0x14, 0x5e,
	0x07, 0x13, 0x06, 0x66, 0xd4, 0xa1, 0x77, 0xd3, 0x18, 0xae, 0x3f, 0x68, 0x60, 0xac, 0xa4, 0x0b,
	0x03, 0xab, 0x72, 0x44, 0xe1, 0xc0, 0x76, 0x1d, 0x97, 0xaf, 0xbe, 0x73, 0x5a, 0x62, 0x4f, 0x36,
	0x60, 0x2f, 0xd6, 0xc8, 0xda, 0x29, 0xbc, 0x16, 0xd7, 0xc8, 0x42, 0x9a, 0xd1, 0xd0, 0xfc, 0x0c,
	0xf2, 0x03, 0x3a, 0xe6, 0x6e, 0xe0, 0x8b, 0xa6, 0xf4, 0x5c, 0x5f, 0xd6, 0x26, 0x8b, 0xc5, 0x50,
	0x46, 0xc8, 0x5d, 0xe4, 0x5d, 0x2c, 0x86, 0xe6, 0x5f, 0x1a, 0xec, 0xaf, 0x29, 0x0d, 0x3a, 0x02,
	0xf0, 0x5c, 0xbf, 0x43, 0x39, 0x17, 0x1f, 0xde, 0x08, 0xa1, 0x44, 0xe4, 0x73, 0x72, 0x37, 0x7f,
	0xae, 0xc7, 0xcf, 0x93, 0x08, 0xfa, 0x0a, 0x0a, 0x13, 0xe2, 0x3b, 0xb7, 0xc4, 0x89, 0x5a, 0xae,
	0x54, 0xff, 0x60, 0xd3, 0x01, 0x18, 0xa7, 0xe2, 0x44, 0x64, 0xd6, 0x44, 0xfb, 0x2b, 0x55, 0x34,
	0x20, 0x3f, 0x25, 0x82, 0xed, 0xc7, 0x0e, 0x98, 0x4f, 0xcd, 0x17, 0x70, 0xb0, 0xae, 0x50, 0xe8,
	0x7d, 0xd8, 0x09, 0x39, 0x61, 0xfc, 0x39, 0x0b, 0x3c, 0xf9, 0x0e, 0x59, 0xbc, 0x08, 0x08, 0x43,
	0x50, 0xdf, 0x1e, 0x06, 0xf2, 0x1b, 0x94, 0xc5, 0xd1, 0xe4, 0xf8, 0x0c, 0xf6, 0x96, 0x3e, 0x6d,
	0x68, 0x1f, 0xca, 0x83, 0xcb, 0x97, 0xfd, 0x4e, 0xf3, 0xba, 0x8f, 0x7b, 0xfd, 0x26, 0x1e, 0xbe,
	0xae, 0xa4, 0x50, 0x01, 0x32, 0x9d, 0xcb, 0xc1, 0xb0, 0xa2, 0x21, 0x80, 0x5c, 0xaf, 0xf1, 0xa2,
	0x79, 0x3e, 0xac, 0xe8, 0xc7, 0x5d, 0xd8, 0x5b, 0x32, 0x08, 0x42, 0x50, 0x7a, 0xd5, 0xc3, 0x17,
	0xd7, 0xad, 0x66, 0xb7, 0x89, 0x9f, 0x0d, 0x7b, 0xb8, 0x92, 0x12, 0xbc, 0x8b, 0xcb, 0xd6, 0xe5,
	0x50, 0x09, 0x6a, 0xe8, 0x00, 0x2a, 0xb8, 0xd9, 0x6a, 0x7e, 0xd7, 0x57, 0xa2, 0xfa, 0xf1, 0x21,
	0x14, 0xe6, 0x75, 0x41, 0x39, 0xd0, 0xf1, 0xb7, 0x95, 0x94, 0xf8, 0x6d, 0x76, 0x2b, 0x5a, 0x63,
	0xf2, 0xef, 0xfd, 0x91, 0xf6, 0xe6, 0xfe, 0x48, 0xfb, 0xef, 0xfe, 0x48, 0x83, 0x77, 0x5f, 0xde,
	0xbe, 0x3f, 0x77, 0x5c, 0x7e, 0x73, 0x3b, 0xb2, 0xc6, 0x81, 0x77, 0x12, 0x65, 0x5c, 0x8b, 0x8c,
	0xf9, 0x58, 0x5e, 0xfe, 0x94, 0x3b, 0xa1, 0x13, 0x88, 0x3f, 0x60, 0xe5, 0xa6, 0x38, 0xca, 0xc9,
	0xb4, 0x27, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xbb, 0x0c, 0x3b, 0x4c, 0x0a, 0x00, 0x00,
}

func (m *RestSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RestSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RestSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Body) > 0 {
		for iNdEx := len(m.Body) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Body[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScheme(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Request) > 0 {
		for iNdEx := len(m.Request) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Request[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScheme(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Headers) > 0 {
		for k := range m.Headers {
			v := m.Headers[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintScheme(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintScheme(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintScheme(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PathVariables) > 0 {
		for k := range m.PathVariables {
			v := m.PathVariables[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintScheme(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintScheme(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintScheme(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintScheme(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BodyParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BodyParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BodyParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheme(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.GeneratorType != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.GeneratorType))
		i--
		dAtA[i] = 0x20
	}
	if m.IsGenerated {
		i--
		if m.IsGenerated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScheme(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BodyParam_SimpleProperty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BodyParam_SimpleProperty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SimpleProperty != nil {
		{
			size, err := m.SimpleProperty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheme(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *BodyParam_ListProperty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BodyParam_ListProperty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ListProperty != nil {
		{
			size, err := m.ListProperty.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheme(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *BodyParam_Properties) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BodyParam_Properties) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Properties != nil {
		{
			size, err := m.Properties.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheme(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *SimpleValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Value != nil {
		{
			size := m.Value.Size()
			i -= size
			if _, err := m.Value.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimpleValue_StringValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleValue_StringValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.StringValue)
	copy(dAtA[i:], m.StringValue)
	i = encodeVarintScheme(dAtA, i, uint64(len(m.StringValue)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}
func (m *SimpleValue_Int32Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleValue_Int32Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintScheme(dAtA, i, uint64(m.Int32Value))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *SimpleValue_Int64Value) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleValue_Int64Value) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintScheme(dAtA, i, uint64(m.Int64Value))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *ListProperty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProperty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListProperty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Value) > 0 {
		for iNdEx := len(m.Value) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Value[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintScheme(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ObjectProperty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectProperty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectProperty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Properties) > 0 {
		for k := range m.Properties {
			v := m.Properties[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScheme(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintScheme(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintScheme(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RequestParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestParam) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RequestParam) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.GeneratorConfig != nil {
		{
			size, err := m.GeneratorConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheme(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Generator != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.Generator))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintScheme(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsGeneratorNeed {
		i--
		if m.IsGeneratorNeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintScheme(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GeneratorConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GeneratorConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneratorConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Res != nil {
		{
			size := m.Res.Size()
			i -= size
			if _, err := m.Res.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *GeneratorConfig_WordGeneratorConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneratorConfig_WordGeneratorConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.WordGeneratorConfig != nil {
		{
			size, err := m.WordGeneratorConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheme(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *GeneratorConfig_RegexpConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneratorConfig_RegexpConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegexpConfig != nil {
		{
			size, err := m.RegexpConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheme(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *GeneratorConfig_DigitGeneratorConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GeneratorConfig_DigitGeneratorConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DigitGeneratorConfig != nil {
		{
			size, err := m.DigitGeneratorConfig.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintScheme(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Section) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Section) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Section) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Max != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.Max))
		i--
		dAtA[i] = 0x10
	}
	if m.Min != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.Min))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *WordGeneratorConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WordGeneratorConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WordGeneratorConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Language != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.Language))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxLetters != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.MaxLetters))
		i--
		dAtA[i] = 0x10
	}
	if m.MinLetters != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.MinLetters))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RegexpConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegexpConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegexpConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Pattern) > 0 {
		i -= len(m.Pattern)
		copy(dAtA[i:], m.Pattern)
		i = encodeVarintScheme(dAtA, i, uint64(len(m.Pattern)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DigitGeneratorConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DigitGeneratorConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DigitGeneratorConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndTo != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.EndTo))
		i--
		dAtA[i] = 0x20
	}
	if m.StartFrom != 0 {
		i = encodeVarintScheme(dAtA, i, uint64(m.StartFrom))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func encodeVarintScheme(dAtA []byte, offset int, v uint64) int {
	offset -= sovScheme(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RestSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovScheme(uint64(l))
	}
	if len(m.PathVariables) > 0 {
		for k, v := range m.PathVariables {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovScheme(uint64(len(k))) + 1 + len(v) + sovScheme(uint64(len(v)))
			n += mapEntrySize + 1 + sovScheme(uint64(mapEntrySize))
		}
	}
	if len(m.Headers) > 0 {
		for k, v := range m.Headers {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovScheme(uint64(len(k))) + 1 + len(v) + sovScheme(uint64(len(v)))
			n += mapEntrySize + 1 + sovScheme(uint64(mapEntrySize))
		}
	}
	if len(m.Request) > 0 {
		for _, e := range m.Request {
			l = e.Size()
			n += 1 + l + sovScheme(uint64(l))
		}
	}
	if len(m.Body) > 0 {
		for _, e := range m.Body {
			l = e.Size()
			n += 1 + l + sovScheme(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BodyParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScheme(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovScheme(uint64(m.Type))
	}
	if m.IsGenerated {
		n += 2
	}
	if m.GeneratorType != 0 {
		n += 1 + sovScheme(uint64(m.GeneratorType))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovScheme(uint64(l))
	}
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BodyParam_SimpleProperty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SimpleProperty != nil {
		l = m.SimpleProperty.Size()
		n += 1 + l + sovScheme(uint64(l))
	}
	return n
}
func (m *BodyParam_ListProperty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListProperty != nil {
		l = m.ListProperty.Size()
		n += 1 + l + sovScheme(uint64(l))
	}
	return n
}
func (m *BodyParam_Properties) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Properties != nil {
		l = m.Properties.Size()
		n += 1 + l + sovScheme(uint64(l))
	}
	return n
}
func (m *SimpleValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		n += m.Value.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimpleValue_StringValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringValue)
	n += 1 + l + sovScheme(uint64(l))
	return n
}
func (m *SimpleValue_Int32Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovScheme(uint64(m.Int32Value))
	return n
}
func (m *SimpleValue_Int64Value) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovScheme(uint64(m.Int64Value))
	return n
}
func (m *ListProperty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Value) > 0 {
		for _, e := range m.Value {
			l = e.Size()
			n += 1 + l + sovScheme(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ObjectProperty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for k, v := range m.Properties {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScheme(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovScheme(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovScheme(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RequestParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovScheme(uint64(l))
	}
	if m.IsGeneratorNeed {
		n += 2
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovScheme(uint64(l))
	}
	if m.Generator != 0 {
		n += 1 + sovScheme(uint64(m.Generator))
	}
	if m.GeneratorConfig != nil {
		l = m.GeneratorConfig.Size()
		n += 1 + l + sovScheme(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeneratorConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Res != nil {
		n += m.Res.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GeneratorConfig_WordGeneratorConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.WordGeneratorConfig != nil {
		l = m.WordGeneratorConfig.Size()
		n += 1 + l + sovScheme(uint64(l))
	}
	return n
}
func (m *GeneratorConfig_RegexpConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegexpConfig != nil {
		l = m.RegexpConfig.Size()
		n += 1 + l + sovScheme(uint64(l))
	}
	return n
}
func (m *GeneratorConfig_DigitGeneratorConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DigitGeneratorConfig != nil {
		l = m.DigitGeneratorConfig.Size()
		n += 1 + l + sovScheme(uint64(l))
	}
	return n
}
func (m *Section) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Min != 0 {
		n += 1 + sovScheme(uint64(m.Min))
	}
	if m.Max != 0 {
		n += 1 + sovScheme(uint64(m.Max))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WordGeneratorConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinLetters != 0 {
		n += 1 + sovScheme(uint64(m.MinLetters))
	}
	if m.MaxLetters != 0 {
		n += 1 + sovScheme(uint64(m.MaxLetters))
	}
	if m.Language != 0 {
		n += 1 + sovScheme(uint64(m.Language))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegexpConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pattern)
	if l > 0 {
		n += 1 + l + sovScheme(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DigitGeneratorConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StartFrom != 0 {
		n += 1 + sovScheme(uint64(m.StartFrom))
	}
	if m.EndTo != 0 {
		n += 1 + sovScheme(uint64(m.EndTo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovScheme(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScheme(x uint64) (n int) {
	return sovScheme(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RestSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RestSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RestSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathVariables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PathVariables == nil {
				m.PathVariables = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScheme
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScheme
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthScheme
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthScheme
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScheme
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthScheme
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthScheme
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScheme(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScheme
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PathVariables[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Headers == nil {
				m.Headers = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScheme
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScheme
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthScheme
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthScheme
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScheme
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthScheme
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthScheme
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScheme(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScheme
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Headers[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = append(m.Request, &RequestParam{})
			if err := m.Request[len(m.Request)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body, &BodyParam{})
			if err := m.Body[len(m.Body)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BodyParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BodyParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BodyParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= BodyParamType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGenerated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGenerated = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratorType", wireType)
			}
			m.GeneratorType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GeneratorType |= GeneratorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &GeneratorConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SimpleProperty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SimpleValue{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &BodyParam_SimpleProperty{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListProperty", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ListProperty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &BodyParam_ListProperty{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &ObjectProperty{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Value = &BodyParam_Properties{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = &SimpleValue_StringValue{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32Value", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &SimpleValue_Int32Value{v}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64Value", wireType)
			}
			var v int64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Value = &SimpleValue_Int64Value{v}
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProperty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProperty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProperty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value, &SimpleValue{})
			if err := m.Value[len(m.Value)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ObjectProperty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectProperty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectProperty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Properties == nil {
				m.Properties = make(map[string]*BodyParam)
			}
			var mapkey string
			var mapvalue *BodyParam
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScheme
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScheme
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthScheme
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthScheme
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScheme
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScheme
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScheme
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BodyParam{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScheme(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScheme
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Properties[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGeneratorNeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGeneratorNeed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generator", wireType)
			}
			m.Generator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Generator |= GeneratorType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GeneratorConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GeneratorConfig == nil {
				m.GeneratorConfig = &GeneratorConfig{}
			}
			if err := m.GeneratorConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GeneratorConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GeneratorConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GeneratorConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WordGeneratorConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &WordGeneratorConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Res = &GeneratorConfig_WordGeneratorConfig{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegexpConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegexpConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Res = &GeneratorConfig_RegexpConfig{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DigitGeneratorConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DigitGeneratorConfig{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Res = &GeneratorConfig_DigitGeneratorConfig{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Section) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Section: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Section: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			m.Min = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Min |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			m.Max = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Max |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WordGeneratorConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WordGeneratorConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WordGeneratorConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLetters", wireType)
			}
			m.MinLetters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLetters |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLetters", wireType)
			}
			m.MaxLetters = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLetters |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			m.Language = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Language |= Language(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegexpConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegexpConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegexpConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pattern", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScheme
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthScheme
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pattern = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DigitGeneratorConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DigitGeneratorConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DigitGeneratorConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartFrom", wireType)
			}
			m.StartFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartFrom |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTo", wireType)
			}
			m.EndTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndTo |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScheme(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScheme
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScheme(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScheme
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScheme
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScheme
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScheme
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScheme
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScheme        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScheme          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScheme = fmt.Errorf("proto: unexpected end of group")
)
