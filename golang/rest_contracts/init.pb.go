// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: contracts/rest_contracts/init.proto

package rest_contracts

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InitBomberPayload struct {
	BomberIp             string   `protobuf:"bytes,1,opt,name=bomberIp,proto3" json:"bomberIp,omitempty"`
	BomberId             string   `protobuf:"bytes,2,opt,name=bomberId,proto3" json:"bomberId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitBomberPayload) Reset()         { *m = InitBomberPayload{} }
func (m *InitBomberPayload) String() string { return proto.CompactTextString(m) }
func (*InitBomberPayload) ProtoMessage()    {}
func (*InitBomberPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_e29fe3c7751cdeae, []int{0}
}
func (m *InitBomberPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitBomberPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitBomberPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitBomberPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitBomberPayload.Merge(m, src)
}
func (m *InitBomberPayload) XXX_Size() int {
	return m.Size()
}
func (m *InitBomberPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_InitBomberPayload.DiscardUnknown(m)
}

var xxx_messageInfo_InitBomberPayload proto.InternalMessageInfo

func (m *InitBomberPayload) GetBomberIp() string {
	if m != nil {
		return m.BomberIp
	}
	return ""
}

func (m *InitBomberPayload) GetBomberId() string {
	if m != nil {
		return m.BomberId
	}
	return ""
}

func init() {
	proto.RegisterType((*InitBomberPayload)(nil), "org.bomber.team.contracts.InitBomberPayload")
}

func init() {
	proto.RegisterFile("contracts/rest_contracts/init.proto", fileDescriptor_e29fe3c7751cdeae)
}

var fileDescriptor_e29fe3c7751cdeae = []byte{
	// 171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x4e, 0xce, 0xcf, 0x2b,
	0x29, 0x4a, 0x4c, 0x2e, 0x29, 0xd6, 0x2f, 0x4a, 0x2d, 0x2e, 0x89, 0x47, 0x70, 0x33, 0xf3, 0x32,
	0x4b, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x24, 0xf3, 0x8b, 0xd2, 0xf5, 0x92, 0xf2, 0x73,
	0x93, 0x52, 0x8b, 0xf4, 0x4a, 0x52, 0x13, 0x73, 0xf5, 0xe0, 0xaa, 0x94, 0xbc, 0xb9, 0x04, 0x3d,
	0xf3, 0x32, 0x4b, 0x9c, 0xc0, 0x92, 0x01, 0x89, 0x95, 0x39, 0xf9, 0x89, 0x29, 0x42, 0x52, 0x5c,
	0x1c, 0x10, 0xd5, 0x9e, 0x05, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x70, 0x3e, 0x92, 0x5c,
	0x8a, 0x04, 0x13, 0x8a, 0x5c, 0x8a, 0x53, 0xce, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0xc8, 0x85, 0xdb, 0xd6, 0x28, 0xe7, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24,
	0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x88, 0x8a, 0x78, 0x90, 0x0a, 0x18, 0x1b, 0xec, 0x6a, 0x24, 0xaf,
	0xa4, 0xe7, 0xe7, 0x24, 0xe6, 0xa5, 0xa3, 0x79, 0x30, 0x89, 0x0d, 0xac, 0xcc, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0x04, 0x3e, 0x9b, 0x9c, 0x03, 0x01, 0x00, 0x00,
}

func (m *InitBomberPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitBomberPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitBomberPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BomberId) > 0 {
		i -= len(m.BomberId)
		copy(dAtA[i:], m.BomberId)
		i = encodeVarintInit(dAtA, i, uint64(len(m.BomberId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BomberIp) > 0 {
		i -= len(m.BomberIp)
		copy(dAtA[i:], m.BomberIp)
		i = encodeVarintInit(dAtA, i, uint64(len(m.BomberIp)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInit(dAtA []byte, offset int, v uint64) int {
	offset -= sovInit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitBomberPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BomberIp)
	if l > 0 {
		n += 1 + l + sovInit(uint64(l))
	}
	l = len(m.BomberId)
	if l > 0 {
		n += 1 + l + sovInit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovInit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInit(x uint64) (n int) {
	return sovInit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitBomberPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitBomberPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitBomberPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BomberIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BomberIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BomberId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BomberId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInit = fmt.Errorf("proto: unexpected end of group")
)
